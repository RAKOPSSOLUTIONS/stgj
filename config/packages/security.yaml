security:
    enable_authenticator_manager: true
    encoders:
        App\Entity\User:
            algorithm: bcrypt

    role_hierarchy:
        ROLE_MANAGER: [ROLE_CHAUFFEUR]
        ROLE_ADMIN: [ROLE_USER, ROLE_MANAGER]

    # https://symfony.com/doc/current/security/experimental_authenticators.html
    # enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        database_users:
            entity: { class: App\Entity\User, property: email }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        main:
            #access_denied_handler: App\Security\AccessDeniedHandler
            lazy: true
            guard:
                authenticators:
                    - App\Security\LoginFormAuthenticator
                    #- App\Security\CustomAuthenticator

            logout:
                path: logout
                target: login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        secured_area:
            guard:
                authenticators:
                    - App\Security\AzureAuthenticator
            oauth:
                resource_owners:
                    azure: /oauth/check-azure
                login_path: /oauth/login
                use_forward: false
                failure_path: /oauth/login
                oauth_user_provider:
                    service: hwi_oauth.user.provider

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin, role: IS_AUTHENTICATED_FULLY }