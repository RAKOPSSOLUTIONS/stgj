{% extends 'layout/admin.html.twig' %}

{% block body %}
  <div class="row mb-4">
    <div class="col-lg-9 col-9">
      <h1 class="page-name">
        <i class="bi bi-calendar-check"></i>
        {{ "Recap des reservations"|trans }}
      </h1>
    </div>
    <div class="col-lg-3 col-3">
      <div class="float-end"></div>
    </div>
  </div>

  {% if not app.request.get('sortable') %}
    {% include "layout/form/search/index.html.twig" with { 
      form: search_form,
      tableId: "reservation_entries" 
    } %}
  {% endif %}

  <table class="table table-hover mb-0">
    <thead>
      <tr>
        <th>#</th>
        <th>Date</th>
        <th>Trajet</th>
        <th>Direction</th>
        <th>Heure</th>
        <th colspan="3">Nombre de réservations</th>
      </tr>
    </thead>
    <tbody>
      {% for reservation in reservations %}
        <tr class="mb-0" data-pkv="10">
          <td>{{ loop.index }}</td>
          <td>{{ reservation[0]|date('d/m/Y') }}</td>
          <td>{{ reservation[1] }}</td>
          <td>{{ reservation[3] }}</td>
          <td>{{ reservation[4] }}</td>
          <td>
            <span class="badge rounded-pill bg-success" role="button" tabindex="0" data-bs-toggle="popover" data-bs-trigger="focus" data-bs-content="{{ reservation[11] }}" data-bs-html="true" title="affectées">{{ reservation[10] }}</span>
          </td>
          <td>
            <span class="badge rounded-pill bg-danger" role="button" tabindex="0" data-bs-toggle="popover" data-bs-trigger="focus" data-bs-content="{{ reservation[9] }}" data-bs-html="true" title="non affectées">{{ reservation[8] }}</span>
          </td>
          <td>
            <a href="{{ path('reservation_entries', {'date':reservation[0], 'zone':reservation[1], 'trajet_id':reservation[5], 'direction':reservation[3],'heure':reservation[4]}) }}"> 
              <span class="badge rounded-pill bg-primary" role="button" tabindex="0" data-bs-toggle="popover" data-bs-trigger="focus" data-bs-content="{{ reservation[7] }}" data-bs-html="true" title="total">{{ reservation[6] }}</span>
            </a>
            {% if reservation[8] > 0 %}
              <a href="{{ reservation[1] is not null ? path('reservation_entries', {
                  'date': reservation[0],
                  'zone': reservation[1],
                  'trajet_id': reservation[5],
                  'direction': reservation[3],
                  'heure': reservation[4],
                  'status': 'validée',
                  'create': 'yes'
              }) : 'javascript:void(0);' }}"
              {% if reservation[1] is null %}
                {% set simplifiedReservation = {
                    'date': reservation[0],
                    'zone': reservation[1],
                    'trajet_id': reservation[5],
                    'direction': reservation[3],
                    'heure': reservation[4],
                    'total': reservation[6],
                    'non_affectees': reservation[8],
                    'affectees': reservation[10],
                    'tt' : reservation[9],
                    'idnavette' : reservation[12],
                    'entry' : reservation[13]
                } %}
                {% set reservationJson = simplifiedReservation|json_encode|raw %}
                onclick="handleNavetteClick({{ reservationJson }})"
              {% endif %}
              >Créer une navette</a>
            {% endif %}

            {% if reservation[12] > 0 %} 
              <a href="{{ path('navettes.details', {id: reservation[12]}) }}">Détails de la navette</a>
            {% endif %}
          </td>
        </tr>
      {% endfor %}
    </tbody>
  </table>

  <script type="text/javascript">
async function calculateDistance(point1, point2) {
    const R = 6371;
    const lat1 = point1.lat * Math.PI / 180;
    const lat2 = point2.lat * Math.PI / 180;
    const deltaLat = (point2.lat - point1.lat) * Math.PI / 180;
    const deltaLon = (point2.lon - point1.lon) * Math.PI / 180;

    const a = Math.sin(deltaLat / 2) * Math.sin(deltaLat / 2) +
              Math.cos(lat1) * Math.cos(lat2) *
              Math.sin(deltaLon / 2) * Math.sin(deltaLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
}

async function getRouteForBatch(points, date) {
    try {
        const locations = points.map(p => `${p.lat},${p.lon}`).join('&to=');
        const formattedDate = encodeURIComponent(date);
        
        const url = `https://www.mapquestapi.com/directions/v2/route?key=xAqhkltqZ86gJVxnsrIu9DKLqmYOaXft&from=${locations}&routeType=fastest&doReverseGeocode=false&timeType=1&date=${formattedDate}`;
        
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        
        if (data.info.statuscode !== 0) {
            throw new Error(`MapQuest API error: ${data.info.messages.join(', ')}`);
        }

        return {
            time: data.route.time,
            distance: data.route.distance,
            locations: data.route.locations
        };
    } catch (error) {
        console.error('Error fetching route:', error);
        throw error;
    }
}

async function processBatches(points, date) {
    const batchSize = 10;
    const batches = [];
    
    // Split points into smaller batches
    for (let i = 0; i < points.length; i += batchSize) {
        batches.push(points.slice(i, i + batchSize));
    }
    
    let totalTime = 0;
    let optimizedRoute = [];
    
    for (const batch of batches) {
        try {
            const result = await getRouteForBatch(batch, date);
            totalTime += result.time;
            
            // Add the optimized route points
            for (let i = 0; i < result.locations.length; i++) {
                const location = result.locations[i];
                const originalPoint = batch[i];
                optimizedRoute.push({
                    ...originalPoint,
                    optimizedLat: location.latLng.lat,
                    optimizedLon: location.latLng.lng
                });
            }
        } catch (error) {
            console.error(`Error processing batch: ${error.message}`);
            // Continue with next batch instead of failing completely
            optimizedRoute = optimizedRoute.concat(batch);
        }
    }
    
    return {
        route: optimizedRoute,
        totalTime: totalTime / 60 // Convert to minutes
    };
}

function isUniqueLocation(point, existingPoints) {
    return !existingPoints.some(existing => 
        existing.lat === point.lat && existing.lon === point.lon
    );
}

function splitIntoValidRoutes(points) {
    const routes = [];
    let currentRoute = [];
    let currentTime = 0;
    let processedLocations = [];

    for (const point of points) {
        // Calculate additional time for this point
        const stopTime = isUniqueLocation(point, processedLocations) ? 1 : 0; // 1 minute for unique locations
        const estimatedNewTime = currentTime + stopTime;

        // Check if adding this point would exceed our limits
        if (currentRoute.length >= 20 || estimatedNewTime > 57) {
            if (currentRoute.length > 0) {
                routes.push(currentRoute);
                currentRoute = [];
                currentTime = 0;
                processedLocations = [];
            }
        }

        currentRoute.push(point);
        currentTime += stopTime;
        if (isUniqueLocation(point, processedLocations)) {
            processedLocations.push(point);
        }
    }

    // Add the last route if it has any points
    if (currentRoute.length > 0) {
        routes.push(currentRoute);
    }

    return routes;
}

async function calculateOptimalRoute(points, date) {
    if (points.length <= 2) {
        return { 
            routes: [{
                route: points,
                totalTime: points.length // 1 minute per point
            }],
            totalRoutes: 1
        };
    }

    // Cluster nearby points
    const clusters = [];
    const maxClusterRadius = 2; // 2 km radius

    for (const point of points) {
        let addedToCluster = false;
        
        for (const cluster of clusters) {
            if (calculateDistance(cluster[0], point) <= maxClusterRadius) {
                cluster.push(point);
                addedToCluster = true;
                break;
            }
        }
        
        if (!addedToCluster) {
            clusters.push([point]);
        }
    }

    // Calculate centroids
    const centroids = clusters.map(cluster => {
        const avgLat = cluster.reduce((sum, p) => sum + p.lat, 0) / cluster.length;
        const avgLon = cluster.reduce((sum, p) => sum + p.lon, 0) / cluster.length;
        return { 
            lat: avgLat, 
            lon: avgLon, 
            points: cluster,
            size: cluster.length
        };
    });

    try {
        // Split into valid routes based on constraints
        const routeBatches = splitIntoValidRoutes(centroids);
        const processedRoutes = [];

        for (const batch of routeBatches) {
            const { route: optimizedBatch, totalTime } = await processBatches(batch, date);
            
            // Add stop time for unique locations
            let uniqueLocations = new Set();
            let stopTime = 0;
            optimizedBatch.forEach(point => {
                const locationKey = `${point.lat},${point.lon}`;
                if (!uniqueLocations.has(locationKey)) {
                    stopTime += 1; // 1 minute per unique location
                    uniqueLocations.add(locationKey);
                }
            });

            processedRoutes.push({
                route: optimizedBatch,
                totalTime: totalTime + stopTime
            });
        }

        return {
            routes: processedRoutes,
            totalRoutes: processedRoutes.length
        };
    } catch (error) {
        console.error('Error in route optimization:', error);
        throw error;
    }
}

async function handleNavetteClick(reservationJson) {
    try {
        const reservation = reservationJson;
        console.log('Starting reservation processing:', reservation);

        const entries = reservation.entry.map(entry => ({
            id: entry.id,
            lat: entry.pickupLatitude,
            lon: entry.pickupLongitude,
            location: entry.pickupLocation
        }));
        console.log('Mapped entries:', entries);

        const loadingAlert = document.createElement('div');
        loadingAlert.className = 'alert alert-info';
        loadingAlert.textContent = 'Calculating optimal routes...';
        document.body.appendChild(loadingAlert);

        const { routes, totalRoutes } = await calculateOptimalRoute(entries, reservation.date);
        console.log('Calculated routes:', routes);
        console.log('Total routes:', totalRoutes);
        
        loadingAlert.remove();

        // Prepare data for backend
        const requestData = {
            date: reservation.date,
            direction: reservation.direction,
            heure: reservation.heure,
            routes: routes.map(route => ({
                route: route.route,
                totalTime: route.totalTime
            }))
        };
        console.log('Request data being sent to backend:', requestData);

        // Debug request headers
        const headers = {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.content || ''
        };
        console.log('Request headers:', headers);

        // Create navettes through API with detailed error logging
        try {
            const createNavettesResponse = await fetch('/admin/create_navettes', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(requestData)
            });

            console.log('Response status:', createNavettesResponse.status);
            console.log('Response headers:', Array.from(createNavettesResponse.headers.entries()));

            // Try to get response text even if it's an error
            const responseText = await createNavettesResponse.text();
            console.log('Raw response:', responseText);

            if (!createNavettesResponse.ok) {
                throw new Error(`Server error: ${createNavettesResponse.status}\nResponse: ${responseText}`);
            }

            // Try to parse JSON only if we got here
            const result = JSON.parse(responseText);
            console.log('Parsed response:', result);

            if (result.success) {
                // Show success message
                const successAlert = document.createElement('div');
                successAlert.className = 'alert alert-success';
                let navettesDetails = result.navettes.map((navette, index) => `
                    <h5>Navette ${index + 1}</h5>
                    <p>ID: ${navette.navette_id}</p>
                    <p>Passengers: ${navette.entry_count}</p>
                `).join('');

                successAlert.innerHTML = `
                    <h4>Navettes Created Successfully</h4>
                    <p>Total navettes created: ${result.navettes.length}</p>
                    ${navettesDetails}
                `;
                document.body.appendChild(successAlert);
                
                // Redirect to navettes page after a short delay
                setTimeout(() => {
                    window.location.href = '/admin/navettes';
                }, 3000);
            } else {
                throw new Error('Failed to create navettes: ' + (result.message || 'Unknown error'));
            }
        } catch (fetchError) {
            console.error('Fetch operation details:', {
                error: fetchError,
                requestData: requestData,
                headers: headers
            });
            throw fetchError;
        }
        
    } catch (error) {
        console.error('Detailed error information:', {
            error: error,
            message: error.message,
            stack: error.stack
        });
        
        const errorAlert = document.createElement('div');
        errorAlert.className = 'alert alert-danger';
        errorAlert.textContent = `Error: ${error.message}. Please check console for details.`;
        document.body.appendChild(errorAlert);
        
        setTimeout(() => errorAlert.remove(), 10000);
    }
}



function formatTime(totalTime) {
    const hours = Math.floor(totalTime / 60);
    const minutes = Math.floor(totalTime % 60);
    const seconds = Math.round((totalTime % 1) * 60);
    
    let result = '';
    if (hours > 0) result += `${hours} hr `;
    if (minutes > 0) result += `${minutes} min `;
    if (seconds > 0) result += `${seconds} sec`;
    
    return result.trim() || '0 min';
}
  </script>
{% endblock %}

{% block footer %}
  {{ parent() }}
  {% if app.request.get('sortable') %}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
  {% endif %}
{% endblock %}