{% extends 'layout/admin.html.twig' %}

{% block body %}

  <h1 class="page-name">
    <i class="bi bi-person"></i>
    {% if not entity|length %}
      {{ "Nouveau utilisateur"|trans }}
    {% else %}
      {{ title|trans }}
    {% endif %}
  </h1>
<br />
<style>
  .port-title {
    background-color: #6c757d !important;
  }
  fieldset .col-form-label {
    margin-bottom: 8px;
  }
  .card-entry fieldset {
    margin-bottom: 0px !important;
  }
  .delete-entry {
    right: 15px;
  }
  .entries {
    counter-reset: compagne_counter;
  }
  .compagne-counter:before {
    counter-increment: compagne_counter;
    content: counter(compagne_counter);
    position: absolute;
    top: 5px;
    right: 45px;
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--color-primary);
  }
</style>

<style>
        
        #map {
            height: 500px;
            width: 100%;
            margin-top: 20px;
            border: 2px solid #ccc;
        }
        .input-container {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        input {
            flex-grow: 1;
            padding: 10px;
        }
        #location-details {
            background-color: #f4f4f4;
            padding: 15px;
            margin-top: 20px;
        }
        #drag-instructions {
            color: #666;
            font-style: italic;
            margin-top: 10px;
        }
    </style>
 <ajax-form>
 {{ form_start(form) }}

 
    {% if form.site is defined %}  {{ form_row(form.site) }} {% endif %}
    {% if form.nom is defined %}{{ form_row(form.nom) }} {% endif %}
    {% if form.prenom is defined %}{{ form_row(form.prenom) }}  {% endif %}
    {% if form.matricule is defined %}{{ form_row(form.matricule) }}  {% endif %}
    {% if form.email is defined %}{{ form_row(form.email) }}  {% endif %}
    {% if form.telephone is defined %}{{ form_row(form.telephone) }}  {% endif %}
    {% if form.adresse is defined %}{{ form_row(form.adresse) }}  {% endif %}

    {{ form_row(form.latitude) }} 
    {{ form_row(form.longitude) }}

    {% if form.projet is defined %}{{ form_row(form.projet) }}  {% endif %}
    {% if form.password is defined %}{{ form_row(form.password) }}  {% endif %}
    {% if form.confirm_password is defined %}{{ form_row(form.confirm_password) }}  {% endif %}
 
    <div class="input-container invisible">
        <input 
            type="text" 
            id="address-input" 
            placeholder="Entrez une adresse"
        >
        <button id="search-button" class="btn btn-primary">Rechercher</button>
    </div>

    <div id="drag-instructions">
        Merci de sélectionner les cordonnées GPS de votre domicile sur la carte, afin de les utiliser comme base lors de la planification votre transport.
    </div>

    <div id="map"></div>

    <!-- prettier-ignore -->
    <script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
        ({key: "AIzaSyBmrbaC-lwaxdxlrHq_X51td6YHYztc47g", v: "weekly"});</script>

    <div id="location-details" style="display: none;">
        <h3>Détails de l'emplacement:</h3>
        <p>Adresse: <span id="full-address">-</span></p>
        <p>Latitude: <span id="latitude">-</span></p>
        <p>Longitude: <span id="longitude">-</span></p>
    </div>

<hr class="border-2 border-top border-secondary">
    <button type="button" class="btn btn-outline-danger rounded-0 shadow-none" onclick="history.go(-1);">
      <i class="bi bi-x-lg"></i>
      {{ "Annuler"|trans }}
    </button>
    <button type="submit" class="btn btn-outline-secondary rounded-0 shadow-none  ">
      <i class="bi bi-check2-square"></i>
      {{ "Enregistrer"|trans }}
    </button>

{{ form_end(form) }}
</ajax-form>

{% endblock %}

{% block footer %}
  {{ parent() }}
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.21.0/moment.min.js" type="text/javascript"></script>
   
 
  <script>
  document.querySelector("ajax-form").addEventListener("ajax.form.success", function() {
    setTimeout(function() {
      window.location.href = '{{ path("user.details", {id : entity.id }) }}'
    }, 1000)
  })
  </script>

  <script type="text/javascript">
    var latitude = {{ latitude }};
    var longitude = {{ longitude }};
    var center = { lat: latitude, lng: longitude };
  </script>

  <script>
        let map;
        let marker;
        let geocoder;
        let autocomplete;

        function initMap() {
            // Initialize map (centered on New York)
            map = new google.maps.Map(document.getElementById('map'), {
                center: center,
                zoom: 15,
                mapTypeControl: true,
                streetViewControl: false,
                fullscreenControl: true
            });

            // Initialize geocoder
            geocoder = new google.maps.Geocoder();

            // Initialize autocomplete
            const input = document.getElementById('address-input');
            autocomplete = new google.maps.places.Autocomplete(input, {
                types: ['geocode'],
                fields: ['geometry', 'formatted_address']
            });

            // Add event listener for place selection
            autocomplete.addListener('place_changed', onPlaceChanged);

            // Add click event for search button
            document.getElementById('search-button').addEventListener('click', onPlaceChanged);

            // Create initial marker (draggable)
            marker = new google.maps.Marker({
                map: map,
                position: map.getCenter(),
                draggable: true,
                animation: google.maps.Animation.DROP
            });

            // Add drag events to marker
            marker.addListener('dragend', updateLocationDetails);
            
            //map listner

            
 


            map.addListener('click', (e) => {
        const the_click =  { lat: e.latLng.lat(), lng: e.latLng.lng()};
        //this.handleMapClick(the_click);
        marker.setPosition(e.latLng);

        document.getElementById('user_latitude').value = e.latLng.lat().toFixed(6);
        document.getElementById('user_longitude').value = e.latLng.lng().toFixed(6);

        geocoder.geocode({
    'latLng': e.latLng
  }, function(results, status) {
    if (status == google.maps.GeocoderStatus.OK) {
      if (results[0]) {
        document.getElementById('user_adresse').value = results[0].formatted_address;
      }
    }
  });

      });

        }

         

        function onPlaceChanged() {
            const place = autocomplete.getPlace();

            // If no place selected, use input text for geocoding
            if (!place.geometry) {
                geocodeAddress(document.getElementById('address-input').value);
                return;
            }

            // Get location details
            const location = place.geometry.location;
            updateMapAndMarker(location, place.formatted_address);
        }

        function geocodeAddress(address) {
            geocoder.geocode({ address: address }, (results, status) => {
                if (status === 'OK') {
                    const location = results[0].geometry.location;
                    updateMapAndMarker(location, results[0].formatted_address);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }

        function updateMapAndMarker(location, formattedAddress) {
            // Center map and move marker
            map.setCenter(location);
            map.setZoom(15);

            // Update marker position
            marker.setPosition(location);

            // Update location details
            updateLocationDetails(formattedAddress);
        }

        function updateLocationDetails(formattedAddress) {
            // Get current marker position
            const position = marker.getPosition();
            const lat = position.lat();
            const lng = position.lng();

            // If a formatted address is passed, use it
            if (typeof formattedAddress === 'string') {
                document.getElementById('full-address').textContent = formattedAddress;
            } else {
                // Reverse geocode to get address for dragged marker
                geocoder.geocode({ location: { lat, lng } }, (results, status) => {
                    if (status === 'OK') {
                        document.getElementById('full-address').textContent = results[0].formatted_address || 'Address not available';

                        document.getElementById('user_adresse').value = results[0].formatted_address || 'Address not available';
                    }
                });
            }

            // Update coordinates
            document.getElementById('latitude').textContent = lat.toFixed(6);
            document.getElementById('longitude').textContent = lng.toFixed(6);

            document.getElementById('user_latitude').value = lat.toFixed(6);
            document.getElementById('user_longitude').value = lng.toFixed(6);

            


        }

        // Dynamically load Google Maps script with Places library
        function loadGoogleMapsScript() {
            const script = document.createElement('script');
            script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyBmrbaC-lwaxdxlrHq_X51td6YHYztc47g&libraries=places&callback=initMap`;
            script.async = true;
            script.defer = true;
            document.head.appendChild(script);
        }

        // Load the Google Maps script when the page loads
        window.onload = loadGoogleMapsScript;
    </script>



  </body>

   


{% endblock %}
