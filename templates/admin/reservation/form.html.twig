{% extends 'layout/admin.html.twig' %}

{% block body %}

  <h1 class="page-name">
    <i class="bi bi-calendar-check"></i>
    {% if not entity|length %}
      {{ "Nouvelle pré-réservation"|trans }}
    {% else %}
      {{ "Editer une pré-réservation"|trans }}
    {% endif %}
  </h1>
<br />
<style>
  .port-title {
    background-color: #6c757d !important;
  }
  fieldset .col-form-label {
    margin-bottom: 8px;
  }
  .card-entry fieldset {
    margin-bottom: 0px !important;
  }
  .delete-entry {
    right: 15px;
  }
  .entries {
    counter-reset: compagne_counter;
  }
  .compagne-counter:before {
    counter-increment: compagne_counter;
    content: counter(compagne_counter);
    position: absolute;
    top: 5px;
    right: 45px;
    font-size: 1.2rem;
    font-weight: 700;
    color: var(--color-primary);
  }
</style>

<ajax-form>
    {{ form_start(form) }}
    
    <div class="row">
      <div class="col-sm-6">
        <h3 class="btn btn-danger text-withe">ENTREE</h3> 
        {{ form_row(form.dates_entree) }}
        {{ form_row(form.shift_entree) }} 
        <div id="div_trajet_entree" {% if entity and entity.isHomePickup %}style="display:none;" {% endif %}>
          {{ form_row(form.trajet_entree) }}
        </div>
        <div id="div_pickup_entree" {% if entity and entity.isHomePickup %}style="display:none;" {% endif %}>
          {{ form_row(form.pickup_entree) }}
        </div>
        <div id="div_adresse_entree" {% if entity and entity.isHomePickup !=1 %}style="display:none;" {% endif %}>
          {{ form_row(form.adresse_entree) }}
        </div>
        {% if form.repere_entree is defined %} 
          {{ form_row(form.repere_entree) }}
        {% endif %}
      </div>
      
      <div class="col-sm-6">
        <h3 class="btn btn-danger text-withe">SORTIE</h3> 
        {{ form_row(form.dates_sortie) }}
        {{ form_row(form.shift_sortie) }} 
        <div id="div_trajet_sortie" {% if entity and entity.isHomePickup %}style="display:none" {% endif %}>
          {{ form_row(form.trajet_sortie) }}
        </div>
        <div id="div_pickup_sortie" {% if entity and entity.isHomePickup %}style="display:none" {% endif %}>
          {{ form_row(form.pickup_sortie) }}
        </div>
        <div id="div_adresse_sortie" {% if entity and entity.isHomePickup!=1 %}style="display:none;" {% endif %}>
          {{ form_row(form.adresse_sortie) }}
        </div>
        {% if form.repere_sortie is defined %} 
          {{ form_row(form.repere_sortie) }}
        {% endif %}
      </div>
    </div>
    
    <hr class="border-2 border-top border-secondary">
    <button type="button" class="btn btn-outline-danger rounded-0 shadow-none" onclick="history.go(-1);">
      <i class="bi bi-x-lg"></i>
      {{ "Annuler"|trans }}
    </button>
    <button type="submit" class="btn btn-outline-secondary rounded-0 shadow-none">
      <i class="bi bi-check2-square"></i>
      {{ "Enregistrer"|trans }}
    </button>

    {{ form_end(form) }}

    <script>
        // Pass PHP constants to JavaScript
        const SHIFTS_ENTREE = {
            '5': '05h00',
            '6': '06h00',
            '7': '07h00',
            '8': '08h00'
        };

        const SHIFTS_SORTIE = {
            '15': '15h00',
            '16': '16h00',
            '17': '17h00',
            '18': '18h00',
            '19': '19h00',
            '20': '20h00',
            '21': '21h00'
        };

        document.addEventListener('DOMContentLoaded', function() {
            // Select the containers for Entrée and Sortie
            const dateEntreeContainer = document.querySelector('#{{ form.dates_entree.vars.id }}');
            const dateSortieContainer = document.querySelector('#{{ form.dates_sortie.vars.id }}');
            const shiftEntree = document.querySelector('#{{ form.shift_entree.vars.id }}');
            const shiftSortie = document.querySelector('#{{ form.shift_sortie.vars.id }}');
            
            console.log('Form loaded, dateEntree container ID:', dateEntreeContainer ? dateEntreeContainer.id : 'Not found');
            console.log('dateSortie container ID:', dateSortieContainer ? dateSortieContainer.id : 'Not found');
            console.log('shiftEntree ID:', shiftEntree.id);
            console.log('shiftSortie ID:', shiftSortie.id);
            
            // Store original options for shift_entree and shift_sortie
            const originalOptionsEntree = Array.from(shiftEntree.options).map(option => ({
                value: option.value,
                text: option.text
            }));
            
            const originalOptionsSortie = Array.from(shiftSortie.options).map(option => ({
                value: option.value,
                text: option.text
            }));
            
            console.log('Original options for shiftEntree:', originalOptionsEntree);
            console.log('Original options for shiftSortie:', originalOptionsSortie);

            // Function to update shift_entree based on dates_entree
            function updateShiftEntreeOptions() {
                const dateCheckboxes = dateEntreeContainer.querySelectorAll('input[type="checkbox"]');
                let selectedDateValue = null;

                dateCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedDateValue = checkbox.value;
                    }
                });

                console.log('Entrée - Raw selected date value:', selectedDateValue);

                if (!selectedDateValue) {
                    console.log('Entrée - No date selected, resetting to default options');
                    shiftEntree.innerHTML = '';
                    originalOptionsEntree.forEach(opt => {
                        const option = new Option(opt.text, opt.value);
                        shiftEntree.add(option);
                    });
                    console.log('Entrée - Default options for shiftEntree:', Array.from(shiftEntree.options).map(opt => opt.value));
                    return;
                }

                const selectedDate = new Date(selectedDateValue);
                const thresholdDate = new Date('2025-04-06');
                
                if (isNaN(selectedDate.getTime())) {
                    console.error('Entrée - Invalid date selected:', selectedDateValue);
                    return;
                }

                console.log('Entrée - Parsed selected date:', selectedDate.toISOString());
                console.log('Entrée - Threshold date:', thresholdDate.toISOString());
                console.log('Entrée - Is selected date before threshold?', selectedDate < thresholdDate);

                let modifiedShiftsEntree = { ...SHIFTS_ENTREE };

                if (selectedDate >= thresholdDate) {
                    console.log('Entrée - Date is on/after 2025-04-06, modifying shifts');
                    delete modifiedShiftsEntree['5'];
                    modifiedShiftsEntree['9'] = '09h00';
                } else {
                    console.log('Entrée - Date is before 2025-04-06, using original shifts');
                }

                console.log('Entrée - Modified SHIFTS_ENTREE:', modifiedShiftsEntree);

                shiftEntree.innerHTML = '';
                  const emptyOption = new Option('', '');
                  shiftEntree.add(emptyOption);
                Object.entries(modifiedShiftsEntree).forEach(([value, text]) => {
                    const option = new Option(text, value);
                    shiftEntree.add(option);
                });
                console.log('Entrée - Updated options for shiftEntree:', Array.from(shiftEntree.options).map(opt => opt.value));
            }

            // Function to update shift_sortie based on dates_sortie
            function updateShiftSortieOptions() {
                const dateCheckboxes = dateSortieContainer.querySelectorAll('input[type="checkbox"]');
                let selectedDateValue = null;

                dateCheckboxes.forEach(checkbox => {
                    if (checkbox.checked) {
                        selectedDateValue = checkbox.value;
                    }
                });

                console.log('Sortie - Raw selected date value:', selectedDateValue);

                if (!selectedDateValue) {
                    console.log('Sortie - No date selected, resetting to default options');
                    shiftSortie.innerHTML = '';
                    originalOptionsSortie.forEach(opt => {
                        const option = new Option(opt.text, opt.value);
                        shiftSortie.add(option);
                    });
                    console.log('Sortie - Default options for shiftSortie:', Array.from(shiftSortie.options).map(opt => opt.value));
                    return;
                }

                const selectedDate = new Date(selectedDateValue);
                const thresholdDate = new Date('2025-04-06');
                
                if (isNaN(selectedDate.getTime())) {
                    console.error('Sortie - Invalid date selected:', selectedDateValue);
                    return;
                }

                console.log('Sortie - Parsed selected date:', selectedDate.toISOString());
                console.log('Sortie - Threshold date:', thresholdDate.toISOString());
                console.log('Sortie - Is selected date before threshold?', selectedDate < thresholdDate);

                let modifiedShiftsSortie = { ...SHIFTS_SORTIE };

                if (selectedDate >= thresholdDate) {
                    console.log('Sortie - Date is on/after 2025-04-06, modifying shifts');
                    delete modifiedShiftsSortie['15'];
                    modifiedShiftsSortie['22'] = '22h00';
                } else {
                    console.log('Sortie - Date is before 2025-04-06, using original shifts');
                }

                console.log('Sortie - Modified SHIFTS_SORTIE:', modifiedShiftsSortie);

                shiftSortie.innerHTML = '';
                    const emptyOption = new Option('', '');
                    shiftSortie.add(emptyOption);
                Object.entries(modifiedShiftsSortie).forEach(([value, text]) => {
                    const option = new Option(text, value);
                    shiftSortie.add(option);
                });
                console.log('Sortie - Updated options for shiftSortie:', Array.from(shiftSortie.options).map(opt => opt.value));
            }

            // Initial updates
            console.log('Performing initial update for Entrée');
            updateShiftEntreeOptions();
            console.log('Performing initial update for Sortie');
            updateShiftSortieOptions();
            
            // Add event listeners to Entrée checkboxes
            const dateEntreeCheckboxes = dateEntreeContainer.querySelectorAll('input[type="checkbox"]');
            dateEntreeCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    console.log('Entrée - Date checkbox changed, updating options');
                    updateShiftEntreeOptions();
                });
            });

            // Add event listeners to Sortie checkboxes
            const dateSortieCheckboxes = dateSortieContainer.querySelectorAll('input[type="checkbox"]');
            dateSortieCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    console.log('Sortie - Date checkbox changed, updating options');
                    updateShiftSortieOptions();
                });
            });
        });
    </script>
</ajax-form>

{% endblock %}

{% block footer %}
  {{ parent() }}
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.21.0/moment.min.js" type="text/javascript"></script>
 
  <script>
  document.querySelector("ajax-form").addEventListener("ajax.form.success", function() {
    setTimeout(function() {
      window.location.href = '{{ path("reservations") }}'
    }, 1000)
  })
  </script>

  <script>
  console.log("aaa")
  $(document).ready(function() {
    // Initialize validation states


const disabledDates = {{ disabledDates|json_encode|raw }};
  console.log(disabledDates)
  // Disable checkboxes for the specified dates
  function disableWeekendCheckboxes() {
    // Process all entree date inputs
    for (let i = 0; i <= 6; i++) {
      const entrieCheckbox = document.getElementById('reservation_dates_entree_' + i);
      if (entrieCheckbox) {
        const dateValue = entrieCheckbox.value;
        if (disabledDates.includes(dateValue)) {
          entrieCheckbox.disabled = true;
          entrieCheckbox.checked = false;
          const label = entrieCheckbox.closest('label');
          if (label) {
            label.style.opacity = '0.5';
            label.title = 'Reservations not available for weekends and Mondays after Friday 1 PM';
          }
        }
      }
    }
    
    // Process all sortie date inputs
    for (let i = 0; i <= 6; i++) {
      const sortieCheckbox = document.getElementById('reservation_dates_sortie_' + i);
      if (sortieCheckbox) {
        const dateValue = sortieCheckbox.value;
        if (disabledDates.includes(dateValue)) {
          sortieCheckbox.disabled = true;
          sortieCheckbox.checked = false;
          const label = sortieCheckbox.closest('label');
          if (label) {
            label.style.opacity = '0.5';
            label.title = 'Reservations not available for weekends and Mondays after Friday 1 PM';
          }
        }
      }
    }
  }
  
  // Run the function on page load
  disableWeekendCheckboxes();



    let entreeSelected = false;
    let sortieSelected = false;
    
    
    // Function to update required fields based on selection state and visibility
    function updateRequiredFields() {
      // Check shift values
      let shiftEntree = $('#reservation_shift_entree').val();
      let shiftSortie = $('#reservation_shift_sortie').val();
      
      // Set required for visible entree fields
      if (entreeSelected) {
        $('#reservation_shift_entree').attr('required', 'required');
        
        if (shiftEntree) {
          if (shiftEntree < 8 || shiftEntree > 20) {
            // Only address is required, trajet/pickup are not
            $('#reservation_adresse_entree').attr('required', 'required');
            $('#reservation_trajet_entree, #reservation_pickup_entree').removeAttr('required');
          } else {
            // Only trajet/pickup are required, address is not
            $('#reservation_trajet_entree, #reservation_pickup_entree').attr('required', 'required');
            $('#reservation_adresse_entree').removeAttr('required');
          }
        } else {
          // If no shift selected yet, make all potentially visible
          $('#reservation_adresse_entree, #reservation_trajet_entree, #reservation_pickup_entree').attr('required', 'required');
        }
      } else if (!sortieSelected) {
        // Neither entree nor sortie selected, all fields required
        $('#reservation_shift_entree').attr('required', 'required');
        if (shiftEntree) {
          if (shiftEntree < 8 || shiftEntree > 20) {
            $('#reservation_adresse_entree').attr('required', 'required');
            $('#reservation_trajet_entree, #reservation_pickup_entree').removeAttr('required');
          } else {
            $('#reservation_trajet_entree, #reservation_pickup_entree').attr('required', 'required');
            $('#reservation_adresse_entree').removeAttr('required');
          }
        } else {
          $('#reservation_adresse_entree, #reservation_trajet_entree, #reservation_pickup_entree').attr('required', 'required');
        }
      } else {
        // Only sortie selected, entree not required
        $('#reservation_shift_entree, #reservation_trajet_entree, #reservation_pickup_entree, #reservation_adresse_entree').removeAttr('required');
      }
      
      // Set required for visible sortie fields
      if (sortieSelected) {
        $('#reservation_shift_sortie').attr('required', 'required');
        
        if (shiftSortie) {
          if (shiftSortie < 8 || shiftSortie > 20) {
            // Only address is required, trajet/pickup are not
            $('#reservation_adresse_sortie').attr('required', 'required');
            $('#reservation_trajet_sortie, #reservation_pickup_sortie').removeAttr('required');
          } else {
            // Only trajet/pickup are required, address is not
            $('#reservation_trajet_sortie, #reservation_pickup_sortie').attr('required', 'required');
            $('#reservation_adresse_sortie').removeAttr('required');
          }
        } else {
          // If no shift selected yet, make all potentially visible
          $('#reservation_adresse_sortie, #reservation_trajet_sortie, #reservation_pickup_sortie').attr('required', 'required');
        }
      } else if (!entreeSelected) {
        // Neither sortie nor entree selected, all fields required
        $('#reservation_shift_sortie').attr('required', 'required');
        if (shiftSortie) {
          if (shiftSortie < 8 || shiftSortie > 20) {
            $('#reservation_adresse_sortie').attr('required', 'required');
            $('#reservation_trajet_sortie, #reservation_pickup_sortie').removeAttr('required');
          } else {
            $('#reservation_trajet_sortie, #reservation_pickup_sortie').attr('required', 'required');
            $('#reservation_adresse_sortie').removeAttr('required');
          }
        } else {
          $('#reservation_adresse_sortie, #reservation_trajet_sortie, #reservation_pickup_sortie').attr('required', 'required');
        }
      } else {
        // Only entree selected, sortie not required
        $('#reservation_shift_sortie, #reservation_trajet_sortie, #reservation_pickup_sortie, #reservation_adresse_sortie').removeAttr('required');
      }
    }
    
    // Check if any entree date is selected
    function checkEntreeDates() {
      for (let i = 0; i <= 6; i++) {
        if ($('#reservation_dates_entree_' + i).is(':checked')) {
          return true;
        }
      }
      return false;
    }
    
    // Check if any sortie date is selected
    function checkSortieDates() {
      for (let i = 0; i <= 6; i++) {
        if ($('#reservation_dates_sortie_' + i).is(':checked')) {
          return true;
        }
      }
      return false;
    }
    
    // Event listener for entree date changes
    for (let i = 0; i <= 6; i++) {
      $('#reservation_dates_entree_' + i).change(function() {
        $('#reservation_shift_entree').prop('disabled', false);
        entreeSelected = checkEntreeDates();
        updateRequiredFields();
      });
    }
    
    // Event listener for sortie date changes
    for (let i = 0; i <= 6; i++) {
      $('#reservation_dates_sortie_' + i).change(function() {
        $('#reservation_shift_sortie').prop('disabled', false);
        sortieSelected = checkSortieDates();
        updateRequiredFields();
      });
    }
    
    // Update validation on page load
    entreeSelected = checkEntreeDates();
    sortieSelected = checkSortieDates();
    updateRequiredFields();
    
    // Toggle fields based on shift selection for entree
    $('#reservation_shift_entree').change(function() {
      let shift_entree = $(this).val();
      if (shift_entree < 8 || shift_entree > 20) {
        // Show address field, hide trajet/pickup
        $('#div_trajet_entree').hide();
        $('#div_pickup_entree').hide();
        $('#div_adresse_entree').show();
        
        // Update required attributes - only adresse is required
        if (entreeSelected || !sortieSelected) {
          $('#reservation_adresse_entree').attr('required', 'required');
          $('#reservation_trajet_entree, #reservation_pickup_entree').removeAttr('required');
        }
      } else {
        // Show trajet/pickup fields, hide address
        $('#div_trajet_entree').show();
        $('#div_pickup_entree').show();
        $('#div_adresse_entree').hide();
        
        // Update required attributes - only trajet/pickup are required
        if (entreeSelected || !sortieSelected) {
          $('#reservation_trajet_entree, #reservation_pickup_entree').attr('required', 'required');
          $('#reservation_adresse_entree').removeAttr('required');
        }
      }
      updateRequiredFields();
    });
    
    // Toggle fields based on shift selection for sortie
    $('#reservation_shift_sortie').change(function() {
      let shift_sortie = $(this).val();
      if (shift_sortie < 8 || shift_sortie > 20) {
        // Show address field, hide trajet/pickup
        $('#div_trajet_sortie').hide();
        $('#div_pickup_sortie').hide();
        $('#div_adresse_sortie').show();
        
        // Update required attributes - only adresse is required
        if (sortieSelected || !entreeSelected) {
          $('#reservation_adresse_sortie').attr('required', 'required');
          $('#reservation_trajet_sortie, #reservation_pickup_sortie').removeAttr('required');
        }
      } else {
        // Show trajet/pickup fields, hide address
        $('#div_trajet_sortie').show();
        $('#div_pickup_sortie').show();
        $('#div_adresse_sortie').hide();
        
        // Update required attributes - only trajet/pickup are required
        if (sortieSelected || !entreeSelected) {
          $('#reservation_trajet_sortie, #reservation_pickup_sortie').attr('required', 'required');
          $('#reservation_adresse_sortie').removeAttr('required');
        }
      }
      updateRequiredFields();
    });
    
    // Update pickup options based on trajet selection for entree
    $('#reservation_trajet_entree').change(function() {
      let trajet_id = $(this).val();
      var selectElement = document.getElementById('reservation_pickup_entree');
      var options = selectElement.options;
      
      for (var i = 0; i < options.length; i++) {
        var option = options[i];
        var customAttribute = option.getAttribute('data-trajet') ? parseInt(option.getAttribute('data-trajet')) : 0;
        
        if (customAttribute == trajet_id) {
          $(option).css("display", "block");
        } else {
          $(option).css("display", "none");
        }
      }
    });
    
    // Update pickup options based on trajet selection for sortie
    $('#reservation_trajet_sortie').change(function() {
      let trajet_id = $(this).val();
      var selectElement = document.getElementById('reservation_pickup_sortie');
      var options = selectElement.options;
      
      for (var i = 0; i < options.length; i++) {
        var option = options[i];
        var customAttribute = option.getAttribute('data-trajet') ? parseInt(option.getAttribute('data-trajet')) : 0;
        
        if (customAttribute == trajet_id) {
          $(option).css("display", "block");
        } else {
          $(option).css("display", "none");
        }
      }
    });
    
    // Form submission validation
    $('form').submit(function(e) {
      // Check if at least one date is selected
      if (!entreeSelected && !sortieSelected) {
        alert('Please select at least one date for entree or sortie');
        e.preventDefault();
        return false;
      }
      
      // Validate entree fields if entree date is selected
      if (entreeSelected) {
        let shiftEntree = $('#reservation_shift_entree').val();
        if (!shiftEntree) {
          alert('Please select a shift for entree');
          e.preventDefault();
          return false;
        }
        
        if (shiftEntree >= 8 && shiftEntree <= 20) {
          let trajetEntree = $('#reservation_trajet_entree').val();
          let pickupEntree = $('#reservation_pickup_entree').val();
          
          if (!trajetEntree) {
            alert('Please select a trajet for entree');
            e.preventDefault();
            return false;
          }
          
          if (!pickupEntree) {
            alert('Please select a pickup for entree');
            e.preventDefault();
            return false;
          }
        } else {
          let adresseEntree = $('#reservation_adresse_entree').val();
          if (!adresseEntree) {
            alert('Please enter an address for entree');
            e.preventDefault();
            return false;
          }
        }
      }
      
      // Validate sortie fields if sortie date is selected
      if (sortieSelected) {
        let shiftSortie = $('#reservation_shift_sortie').val();
        if (!shiftSortie) {
          alert('Please select a shift for sortie');
          e.preventDefault();
          return false;
        }
        
        if (shiftSortie >= 8 && shiftSortie <= 20) {
          let trajetSortie = $('#reservation_trajet_sortie').val();
          let pickupSortie = $('#reservation_pickup_sortie').val();
          
          if (!trajetSortie) {
            alert('Please select a trajet for sortie');
            e.preventDefault();
            return false;
          }
          
          if (!pickupSortie) {
            alert('Please select a pickup for sortie');
            e.preventDefault();
            return false;
          }
        } else {
          let adresseSortie = $('#reservation_adresse_sortie').val();
          if (!adresseSortie) {
            alert('Please enter an address for sortie');
            e.preventDefault();
            return false;
          }
        }
      }
    });
  });
  </script>
{% endblock %}